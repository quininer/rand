initSidebarItems({"enum":[["ErrorKind","Error kind which can be matched over."]],"fn":[["random","Generates a random value using the thread-local random number generator."],["sample","DEPRECATED: use `seq::sample_iter` instead."],["thread_rng","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`."],["weak_rng","Create a weak random number generator with a default algorithm and seed."]],"mod":[["chacha","The ChaCha random number generator."],["distributions","Sampling from random distributions."],["isaac","The ISAAC random number generator."],["jitter","Non-physical true random number generator based on timing jitter."],["mock","Mock random number generator"],["os","Interfaces to the operating system provided random number generators."],["read","A wrapper around any Read to treat it as an RNG."],["reseeding","A wrapper around another PRNG that reseeds it after it generates a certain number of random bytes."],["seq","Functions for randomly accessing and sampling sequences."]],"struct":[["AsciiGenerator","Iterator which will continuously generate random ascii characters."],["ChaChaRng","A cryptographically secure random number generator that uses the ChaCha algorithm."],["EntropyRng","An RNG provided specifically for seeding PRNGs."],["Error","Error type of random number generators"],["Generator","Iterator which will generate a stream of random items."],["Hc128Rng","A cryptographically secure random number generator that uses the HC-128 algorithm."],["Isaac64Rng","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm."],["IsaacRng","A random number generator that uses the ISAAC algorithm."],["StdRng","The standard RNG. This is designed to be efficient on the current platform."],["ThreadRng","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory."],["XorShiftRng","An Xorshift[1] random number generator."]],"trait":[["AsByteSliceMut","Trait for casting types to byte slices"],["NewRng","A convenient way to seed new algorithmic generators, otherwise known as pseudo-random number generators (PRNGs)."],["Rand","A type that can be randomly generated using an `Rng`."],["Rng","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods."],["RngCore","The core of a random number generator."],["SeedableRng","A random number generator that can be explicitly seeded."]]});